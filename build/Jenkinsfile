pipeline {
  environment {
    registry = "jmaclean/cicd-triggered-by-tag"
    registryCredential = 'futurice-jmaclean-docker'
    dockerImage = ''

    dockerRegistry = "jmaclean/cicd-triggered-by-tag"
    dockerPath = 'build'
    dockerFile = 'Dockerfile'
    imageGroup = 'tdd/' // If any, otherwise leave blank. Example: "imageGroup = 'tdd/'"
    imageName = 'pdi-kettle'
    imageVersion = '8.2.0.0-342'
    imagePath = "${imageGroup}${imageName}"
    buildTag = "${GIT_COMMIT}-b${BUILD_NUMBER}"
    versionTag = "${imageVersion}-b${BUILD_NUMBER}"
  }
  
  agent {
    kubernetes {
      label 'demo'
      defaultContainer 'jnlp'
      yaml """
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins/kube-default: true
    app: jenkins
    component: agent
spec:
  containers:
    # - name: jnlp
    #   image: <jnlp-image-here>
    #   resources:
    #     limits:
    #       cpu: 1
    #       memory: 2Gi
    #     requests:
    #       cpu: 1
    #       memory: 2Gi
    #   imagePullPolicy: Always
    #   env:
    #   - name: POD_IP
    #     valueFrom:
    #       fieldRef:
    #         fieldPath: status.podIP
    #   - name: DOCKER_HOST
    #     value: tcp://localhost:2375
    - name: dind
      image: docker:18.05-dind
      securityContext:
        privileged: true
      volumeMounts:
        - name: dind-storage
          mountPath: /var/lib/docker
  volumes:
    - name: dind-storage
      emptyDir: {}
---
  """
    }
  }

stages {
    // stage('Cloning Git') {
    //   steps {
    //     git 'https://github.com/macleanj/hello-world.git'
    //   }
    // }
    stage('Building image') {
      steps{
        script {
          dockerImage = docker.build("${registry}:${BUILD_NUMBER}", "-f ${dockerFile} .")
          // dockerImage = docker.build("${imagePath}:${buildTag}", "-f ${dockerFile} .")
          // dockerImage = docker.build registry + ":$BUILD_NUMBER"
        }
      }
    }
    stage('Deploy Image') {
      steps{
        script {
          docker.withRegistry( '', registryCredential ) {
            dockerImage.push()
          }
        }
      }
    }
    stage('Remove Unused docker image') {
      steps{
        sh "docker rmi $registry:$BUILD_NUMBER"
      }
    }
  }
}
