pipeline {

  // Installed plugins:
  // Console debugging
  // - timestamps
  // GitHub intergation
  // - Pipeline: GitHub
  // - GitHub
  // - GitHub API
  // - GitHub Branch Source
  // Trigger by tag
  // - Multibranch build strategy extension
 
  options {
    buildDiscarder(logRotator(numToKeepStr: '3', artifactNumToKeepStr: '3'))
    // timestamps()
  }

  environment {
    // Note: When empty the environment variable will not exists! Mind error handling.

    // GIT environment variables
    // FETCH_TAGS = sh(returnStdout: false, script: 'git fetch --tags')

    GIT_BUILD_TAG_CURRENT = sh(returnStdout: true, script: 'git tag --contains | sort | egrep "^v-" | tail -1').trim()
    GIT_BUILD_TAG_CURRENT = "${env.GIT_BUILD_TAG_CURRENT_IN ? env.GIT_BUILD_TAG_CURRENT_IN : 'None'}"
    GIT_BUILD_TAG_LAST_IN = sh(returnStdout: true, script: 'git tag | sort | egrep "^v-" | tail -1').trim()
    GIT_BUILD_TAG_LAST = "${env.GIT_BUILD_TAG_LAST_IN ? env.GIT_BUILD_TAG_LAST_IN : 'None'}"
    GIT_DEPLOY_TAG_CURRENT_IN = sh(returnStdout: true, script: 'git tag --contains | sort | egrep "^d-" | tail -1').trim()
    GIT_DEPLOY_TAG_CURRENT = "${env.GIT_DEPLOY_TAG_CURRENT_IN ? env.GIT_DEPLOY_TAG_CURRENT_IN : 'None'}"
    GIT_DEPLOY_TAG_LAST_IN = sh(returnStdout: true, script: 'git tag | sort | egrep "^d-" | tail -1').trim()
    GIT_DEPLOY_TAG_LAST = "${env.GIT_DEPLOY_TAG_LAST_IN ? env.GIT_DEPLOY_TAG_LAST_IN : 'None'}"
    GIT_COMMIT_SHORT = sh(returnStdout: true, script: 'git rev-parse HEAD').trim().take(7)
    GIT_AUTHOR_NAME = sh(returnStdout: true, script: 'git show -s --pretty=%an').trim()

    // Jenkins environment variables
    JENKINS_PATH = sh(script: 'pwd', , returnStdout: true).trim()

    registry = "jmaclean/docker_hub_account/poc-trigger-by-tag"
    registryCredential = 'futurice-jmaclean-docker'
    dockerImage = ''

    PREP_LOAD_ENV_FILES = sh(returnStdout: false, script: "${JENKINS_PATH}/build/config/_confConvert.sh > /dev/null 2>&1")
  }
  
  agent any
  
  stages {
    stage ('Collected environment variables') {
      steps {
        // environvironment only has to be loaded once
        load "$JENKINS_PATH/build/config/env.files/generic.groovy"
        load "$JENKINS_PATH/build/config/env.files/branch_${GIT_BRANCH}.groovy"
        sh """
          cat << EOF
----- GIT ----- GIT ----- GIT ----- GIT ----- GIT -----
GIT_COMMIT: ${GIT_COMMIT}
GIT_COMMIT_SHORT: ${GIT_COMMIT_SHORT}
GIT_BRANCH: ${GIT_BRANCH}
GIT_PREVIOUS_COMMIT: ${GIT_PREVIOUS_COMMIT}
GIT_PREVIOUS_SUCCESSFUL_COMMIT: ${GIT_PREVIOUS_SUCCESSFUL_COMMIT}
GIT_BUILD_TAG_CURRENT: ${GIT_BUILD_TAG_CURRENT}
GIT_BUILD_TAG_LAST: ${GIT_BUILD_TAG_LAST}
GIT_DEPLOY_TAG_CURRENT: ${GIT_DEPLOY_TAG_CURRENT}
GIT_DEPLOY_TAG_LAST: ${GIT_DEPLOY_TAG_LAST}
GIT_AUTHOR_NAME: ${GIT_AUTHOR_NAME}
GIT_URL: ${GIT_URL}
----- JENKINS ----- JENKINS ----- JENKINS ----- JENKINS
JENKINS_PATH: ${JENKINS_PATH}
EOF
        """
      }
    }
    stage('All environmental variables') {
      steps {
        sh "printenv | sort"
      }
    }
    stage ('Close-out') {
      steps {
        sh 'echo HERE'
      }
    }
  }
}
