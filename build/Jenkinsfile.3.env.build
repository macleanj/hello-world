// Installed plugins:
// Console debugging
// - timestamps
// GitHub intergation
// - Pipeline: GitHub
// - Basic Branch Build Strategies Plugin
// Config
// - Add label "master" to master node. Enhance #executers: 5

// ------------------------
// Shared Library Functions
// ------------------------
// Implicitly loaded in the project Folder
import com.daimler.openshift.OpenShiftBuilder
import com.daimler.github.Github

def debugInfo
def g = globalVars()
// g.buildThrottle = 1

pipeline {

  // ******************************************************
  // ********************** Triggers **********************
  // Not working on multibranch
  // triggers {
  //   pollSCM( (BRANCH_NAME == 'master' || BRANCH_NAME == 'develop') ? '* * * * *' : '') /* default: poll once a minute */
  // }
  // triggers {
  //   pollSCM('* * * * *') /* default: poll once a minute */
  // }
  // // ********************** Triggers **********************
  // ******************************************************

  options {
    disableConcurrentBuilds()
    buildDiscarder(
      logRotator(
        artifactDaysToKeepStr: '', 
        artifactNumToKeepStr: '5', 
        daysToKeepStr: '', 
        numToKeepStr: '5'
      )
    )
    timestamps()
  }

  environment {
    GIT_AUTHOR_NAME = sh(returnStdout: true, script: 'git show -s --pretty=%an').trim()
  }

  // ****************************************************
  // ********************** Agents **********************
  // Any
  // agent any

  // Fixed lable
  // agent {
  //   label 'docker'
  // }

  // Kubernetes fixed podTemplate
  agent {
    kubernetes {
      label 'jnlp'
      cloud 'kubernetes'
      // defaultContainer 'jenkins-builder'
      // instanceCap 1
      // yamlFile "build/k8/build-pod-img.yml"
      yamlFile "build/k8/build-pod-img.yml"
    }
  }

  // Kubernetes merged podTemplate via library
  // agent {
  //   // Mind the _ (underscore) in the definition. Containers themselves will have the _ exchanged for a -
  //   kubernetes(k8sagent(name: 'base+s_micro', label: 'jnlp', cloud: 'kubernetes'))
  // }
  // // ********************** Agents **********************
  // ****************************************************

  // Notes
  // Branches should run otherwise tags get orphaned
  // master|develop|PR-.*|refs\/tags\/.*
  // Filter by name (with regular expression): master|develop|PR-.*|.*tags.*|feature.*|.*RELEASE OR ^((?!master).)*$|^((?!develop).)*$
  // when { tag "release-*" }
  // when { not { branch 'master' } }
  // when { branch "feature/*" }
  // when { changeRequest() }.
  // https://jenkins.io/doc/book/pipeline/syntax/#when
  stages {
    stage ('DUMMY2') {
      steps {
        sh 'echo "DUMMY - globalVars.buildThrottle = ${g.buildThrottle}"'
      }
    }
    stage ('DUMMY') {
      when {
        beforeAgent true
        expression { environment name: 'BUILD_NUMBER', value: ${g.buildThrottle} }
      }
      steps {
        script {
          echo "DUMMY - globalVars.buildThrottle = ${g.buildThrottle}"
        }
      }
    }
    // stage ('Set environment') {
    //   agent { label 'master' }
    //   when {
    //     beforeAgent true
    //     expression { env.BUILD_NUMBER == g.buildThrottle }
    //   }
    //   environment {
    //     TMP_TAGS_NAME = "${TAG_NAME ? TAG_NAME : ''}"
    //     TMP_CHANGE_ID = "${CHANGE_ID ? CHANGE_ID : ''}"
    //     BASE_DIR = sh(returnStdout: true, script: "echo ${WORKSPACE} | sed -e 's?.*/workspace/??g' | sed -e 's?/??g'").trim()
    //     WORKSPACE_LIBS = sh(returnStdout: true, script: "[ -d ${WORKSPACE}/../workspace@libs ] && echo \"${WORKSPACE}/../workspace@libs\" || echo \"${WORKSPACE}/../${BASE_DIR}@libs\"").trim()
    //     PREP_LOAD_ENV = sh(returnStdout: false, script: "${WORKSPACE_LIBS}/cicd/resources/com/cicd/jenkins/prepEnv.sh -build_number ${BUILD_NUMBER} -git_commit ${GIT_COMMIT} -tag_name ${TMP_TAGS_NAME} -change_id ${TMP_CHANGE_ID} > /dev/null 2>&1")
    //   }
    //   steps {
    //     sh 'echo "master - Set environment"'
    //     load "${WORKSPACE_LIBS}/cicd/resources/com/cicd/jenkins/files/env.groovy"

    //     script {
    //       _github = new Github(this)
    //       _builder = new OpenShiftBuilder(this)

    //       if (env.CICD_DEBUG == '1') {
    //         debugInfo = sh(script: "printenv | sort", returnStdout: true)
    //         echo "DEBUG: Environment\n${debugInfo}"
    //       }
    //     }
    //   }
    // }
    // stage ('Build Image') {
    //   when { environment name: 'CICD_BUILD_ENABLED', value: '1' }
    //   steps {
    //     container ('jenkins-builder') {
    //       sh 'echo "jenkins-builder - Build Image"'
    //       sh 'img build -f Dockerfile.cicd -t ${CICD_REGISTRY_URL}/${CICD_REGISTRY_SPACE}/${APP_NAME}:${CICD_TAGS_ID} .'
    //     }
    //   }
    // }
    // stage ('Publish Image') {
    //   when { environment name: 'CICD_BUILD_ENABLED', value: '1' }
    //   steps {
    //     container ('jenkins-builder') {
    //       sh 'echo "jenkins-builder - Publish Image"'
    //       withCredentials([usernamePassword(credentialsId: ${env.CICD_REGISTRY_CRED_ID}, usernameVariable: 'user', passwordVariable: 'pass')]) {
    //         sh 'img login -u $user -p $pass ${CICD_REGISTRY_URL}'
    //         sh 'img push ${CICD_REGISTRY_URL}/${CICD_REGISTRY_SPACE}/${APP_NAME}:${CICD_TAGS_ID}'
    //       }
    //     }
    //   }
    // }
    // stage ('Keep') {
    //   when { environment name: 'CICD_BUILD_ENABLED', value: '1' }
    //   steps {
    //     container ('dind') {
    //       sh 'echo "Build stage. Building image for ${APP_NAME} version ${CICD_TAGS_ID}."'

    //       dir ("${CICD_BUILD_PATH}") {
    //         script {
    //           dockerImage = docker.build("${CICD_REGISTRY}/${APP_NAME}:${CICD_TAGS_ID}", "-f ${CICD_BUILD_FILE} .")
    //         }
    //       }
    //     }
    //   }
    // }
    // stage ('Build Image Keep') {
    //   when { environment name: 'CICD_BUILD_ENABLED', value: '1' }
    //   steps {
    //     container ('dind') {
    //       sh 'echo "Build stage. Building image for ${APP_NAME} version ${CICD_TAGS_ID}."'

    //       dir ("${CICD_BUILD_PATH}") {
    //         script {
    //           dockerImage = docker.build("${CICD_REGISTRY}/${APP_NAME}:${CICD_TAGS_ID}", "-f ${CICD_BUILD_FILE} .")
    //         }
    //       }
    //     }
    //   }
    // }
    // stage ('Push Image Keep') {
    //   when {
    //     environment name: 'CICD_BUILD_ENABLED', value: '1'
    //   }
    //   steps {   
    //     container ('dind') {
    //       script {
    //         docker.withRegistry( "${CICD_REGISTRY_URL}", "${CICD_REGISTRY_CREDENTIALS}" ) {
    //           dockerImage.push()
    //         }
    //       }
    //     }
    //   }
    // }

    // stage ('Unit Testing)') {
    //   when { environment name: 'CICD_BUILD_ENABLED', value: '1' }
    //   steps {
    //     sh 'echo "Compile Code"'
    //   }
    // }
    // stage ('Deploy') {
    //   when { environment name: 'CICD_DEPLOY_ENABLED', value: '1' }
    //   steps {
    //     sh 'echo "Deploy"'
    //   }
    // }
  
  // stages
  }

  post {
    always {
      echo 'This will always run'
    }
    success {
      echo 'This will run only if successful'
    }
    failure {
      echo 'This will run only if failed'
    }
    unstable {
      echo 'This will run only if the run was marked as unstable'
    }
    changed {
      echo 'This will run only if the state of the Pipeline has changed'
      echo 'For example, if the Pipeline was previously failing but is now successful'
    }
  // post
  }


}
