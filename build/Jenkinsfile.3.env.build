// Installed plugins:
// Console debugging
// - timestamps
// GitHub intergation
// - Pipeline: GitHub
// - Basic Branch Build Strategies Plugin
// - Permissive Script Security
//   - During library development this can disable all security blockers
//   - Fix bug to show “In-process Script Approval” menu: enable plugin - restart - disable plugin - restart)
// Config
// - Add label "master" to master node. Enhance #executers: 5

// ------------------------
// Shared Library Functions
// ------------------------
// Implicitly loaded in the project Folder

// import com.daimler.openshift.OpenShiftBuilder
// import com.daimler.github.Github

@NonCPS
tgr = library identifier: 'tested-git-repo@develop', retriever: modernSCM (
  [ $class: 'GitSCMSource',
    remote: 'https://github.com/macleanj/jenkins-library.git',
    credentialsId: 'futurice-maclean-github'
  ]
)

jsl = library identifier: 'k8sagent@develop', retriever: modernSCM (
  [ $class: 'GitSCMSource',
    remote: 'https://github.com/macleanj/jenkins-k8sagent-lib.git',
    credentialsId: 'futurice-maclean-github'
  ]
)

def debugInfo
def g = globalVars()
// g.buildThrottle = 1

pipeline {
  options {
    // skipDefaultCheckout()
    disableConcurrentBuilds()
    buildDiscarder(
      logRotator(
        artifactDaysToKeepStr: '', 
        artifactNumToKeepStr: '5', 
        daysToKeepStr: '', 
        numToKeepStr: '5'
      )
    )
    timestamps()
  }

  environment {
    GIT_AUTHOR_NAME = sh(returnStdout: true, script: 'git show -s --pretty=%an').trim()
  }

  agent {
    kubernetes(k8sagent(name: 'base+jenkins_builder+s_micro', label: 'jnlp', cloud: 'kubernetes'))
  }
  stages {
    stage ('Set environment') {
      steps {
        sh "echo HERE"
      }
    }

    // stage ('Set environment') {
    //   agent { label 'master' }
    //   when {
    //     beforeAgent true
    //     expression { BUILD_NUMBER.toInteger() <= g.buildThrottle }
    //   }
    //   environment {
    //     TMP_TAGS_NAME = "${TAG_NAME ? TAG_NAME : ''}"
    //     TMP_CHANGE_ID = "${CHANGE_ID ? CHANGE_ID : ''}"
    //     WORKSPACE_BASE_DIR = sh(returnStdout: true, script: "echo ${WORKSPACE} | sed -e 's?.*/workspace/??g' | sed -e 's?@.*/*??g'").trim()
    //     WORKSPACE_LIBS = sh(returnStdout: true, script: "[ -d ${WORKSPACE}/../workspace@libs ] && echo \"${WORKSPACE}/../workspace@libs\" || echo \"${WORKSPACE}/../${WORKSPACE_BASE_DIR}@libs\"").trim()
    //     PREP_LOAD_ENV = sh(returnStdout: false, script: "${WORKSPACE_LIBS}/cicd/resources/com/cicd/jenkins/prepEnv.sh -build_number ${BUILD_NUMBER} -git_commit ${GIT_COMMIT} -tag_name ${TMP_TAGS_NAME} -change_id ${TMP_CHANGE_ID} > /dev/null 2>&1")
    //   }
    //   steps {
    //     sh 'echo "master - Set environment"'
    //     load "${WORKSPACE_LIBS}/cicd/resources/com/cicd/jenkins/files/env.groovy"

    //     script {
    //       // _github = new Github(this)
    //       // _builder = new OpenShiftBuilder(this)

    //       if (env.CICD_DEBUG == '1') {
    //         debugInfo = sh(script: "printenv | sort", returnStdout: true)
    //         echo "DEBUG: Environment\n${debugInfo}"
    //       }
    //     }
    //   }
    // }

    // stage ('Build Image') {
    //   when { expression { BUILD_NUMBER.toInteger() <= g.buildThrottle } }
    //   parallel {
    //     stage ('Build Image - Kubernetes') {
    //       when { expression { CICD_CLOUD_TYPE == 'Kubernetes' } }
    //       steps {
    //         container ('jenkins-builder') {
    //           sh 'echo "jenkins-builder - Build Image - Kubernetes"'
    //           sh 'img build -f Dockerfile.cicd -t ${CICD_REGISTRY_URL}/${CICD_REGISTRY_SPACE}/${APP_NAME}:${CICD_TAGS_ID} .'
    //         }
    //       }
    //     }
    //     stage ('Build Image - OpenShift') {
    //       when { not { expression { CICD_CLOUD_TYPE == 'Kubernetes' } } }
    //       steps {
    //         container ('jenkins-builder') {
    //           sh 'echo "jenkins-builder - Build Image - OpenShift"'
    //           script {
    //             _openshiftBuilder.build()
    //           }
    //         }
    //       }
    //     }
    //   }
    // // Stage: Build
    // }

    // stage ('Publish Image') {
    //   when {
    //     expression { BUILD_NUMBER.toInteger() <= g.buildThrottle }
    //     expression { CICD_CLOUD_TYPE == 'Kubernetes' }
    //   }
    //   parallel {
    //     stage ('Publish Image - Docker Image Registry') {
    //       when { expression { CICD_CLOUD_REGISTRY == 'Kubernetes' } }
    //       steps {
    //         container ('jenkins-builder') {
    //           sh 'echo "jenkins-builder - Publish Image - Docker Image Registry"'
    //           withCredentials([usernamePassword(credentialsId: CICD_REGISTRY_CRED_ID, usernameVariable: 'user', passwordVariable: 'pass')]) {
    //             sh 'img login -u $user -p $pass ${CICD_REGISTRY_URL}'
    //             sh 'img push ${CICD_REGISTRY_URL}/${CICD_REGISTRY_SPACE}/${APP_NAME}:${CICD_TAGS_ID}'
    //           }
    //         }
    //       }
    //     }
    //     stage ('Publish Image - OpenShift ImageStream') {
    //       when { not { expression { CICD_CLOUD_REGISTRY == 'Kubernetes' } } }
    //       steps {
    //         container ('jenkins-builder') {
    //           sh 'echo "jenkins-builder - Publish Image - OpenShift ImageStream"'
    //           withCredentials([usernamePassword(credentialsId: CICD_REGISTRY_CRED_ID, usernameVariable: 'user', passwordVariable: 'pass')]) {
    //             sh 'oc login https://$user --token=$pass'
    //             sh 'img login -u "$(oc whoami -t)" -p "$(oc whoami -t)" ${CICD_REGISTRY_URL}'
    //             sh 'img push ${CICD_REGISTRY_URL}/${CICD_REGISTRY_SPACE}/${APP_NAME}:${CICD_TAGS_ID}'
    //           }
    //         }
    //       }
    //     }
    //   // parallel
    //   }
    // // Stage: Publish
    // }



    // stage ('Keep') {
    //   when { expression { CICD_BUILD_ENABLED.toInteger() == 1 } }
    //   steps {
    //     container ('dind') {
    //       sh 'echo "Build stage. Building image for ${APP_NAME} version ${CICD_TAGS_ID}."'

    //       dir ("${CICD_BUILD_PATH}") {
    //         script {
    //           dockerImage = docker.build("${CICD_REGISTRY}/${APP_NAME}:${CICD_TAGS_ID}", "-f ${CICD_BUILD_FILE} .")
    //         }
    //       }
    //     }
    //   }
    // }
    // stage ('Build Image Keep') {
    //  when { expression { CICD_BUILD_ENABLED.toInteger() == 1 } }
    //   steps {
    //     container ('dind') {
    //       sh 'echo "Build stage. Building image for ${APP_NAME} version ${CICD_TAGS_ID}."'

    //       dir ("${CICD_BUILD_PATH}") {
    //         script {
    //           dockerImage = docker.build("${CICD_REGISTRY}/${APP_NAME}:${CICD_TAGS_ID}", "-f ${CICD_BUILD_FILE} .")
    //         }
    //       }
    //     }
    //   }
    // }
    // stage ('Push Image Keep') {
    //  when { expression { CICD_BUILD_ENABLED.toInteger() == 1 } }
    //   steps {   
    //     container ('dind') {
    //       script {
    //         docker.withRegistry( "${CICD_REGISTRY_URL}", "${CICD_REGISTRY_CREDENTIALS}" ) {
    //           dockerImage.push()
    //         }
    //       }
    //     }
    //   }
    // }

    // stage ('Unit Testing)') {
    //  when { expression { CICD_BUILD_ENABLED.toInteger() == 1 } }
    //   steps {
    //     sh 'echo "Compile Code"'
    //   }
    // }
    // stage ('Deploy') {
    //  when { expression { CICD_BUILD_ENABLED.toInteger() == 1 } }
    //   steps {
    //     sh 'echo "Deploy"'
    //   }
    // }
  
  // stages
  }

}
